{"ast":null,"code":"export default {\n  name: \"SelectUser\",\n  data() {\n    let checkAge = (rule, value, callback) => {\n      if (value > 150) {\n        callback(new Error('Input is too large'));\n      } else {\n        callback();\n      }\n    };\n    let checkDuplicate = (rule, value, callback) => {\n      if (this.form.id) {\n        return callback();\n      }\n      this.$axios.get(this.$httpUrl + \"/user/findByNo?no=\" + this.form.no).then(res => res.data).then(res => {\n        if (res.code != 200) {\n          callback();\n        } else {\n          callback(new Error('Account already exist!'));\n        }\n      });\n    };\n    return {\n      tableData: [],\n      pageSize: 10,\n      pageNum: 1,\n      total: 0,\n      name: '',\n      //refer v-model里的name\n      gender: '',\n      genders: [{\n        value: '1',\n        label: 'Male'\n      }, {\n        value: '2',\n        label: 'Female'\n      }],\n      centerDialogVisible: false,\n      form: {\n        name: '',\n        no: '',\n        password: '',\n        age: '',\n        phone: '',\n        gender: '0',\n        roleId: '2'\n      },\n      rules: {\n        name: [{\n          required: true,\n          message: 'Please input  name',\n          trigger: 'blur'\n        }],\n        no: [{\n          required: true,\n          message: 'Please input  account number',\n          trigger: 'blur'\n        }, {\n          min: 3,\n          max: 8,\n          message: 'Length should be 3 to 8',\n          trigger: 'blur'\n        }, {\n          validator: checkDuplicate,\n          trigger: 'blur'\n        }],\n        password: [{\n          required: true,\n          message: 'Please input  password',\n          trigger: 'blur'\n        }, {\n          min: 3,\n          max: 8,\n          message: 'Length should be 3 to 8',\n          trigger: 'blur'\n        }],\n        age: [{\n          required: true,\n          message: 'Please input  age',\n          trigger: 'blur'\n        }, {\n          min: 1,\n          max: 3,\n          message: 'Length should be 1 to 3',\n          trigger: 'blur'\n        }, {\n          pattern: /^([1-9][0-9]*){1,3}$/,\n          message: 'Age must be positive integer',\n          trigger: \"blur\"\n        }, {\n          validator: checkAge,\n          trigger: 'blur'\n        }],\n        phone: [{\n          required: true,\n          message: \"Phone number cannot be null\",\n          trigger: \"blur\"\n        }, {\n          pattern: /^1[3|4|5|6|7|8|9][0-9]\\d{8}$/,\n          message: \"Please input valid phone number\",\n          trigger: \"blur\"\n        }]\n      }\n    };\n  },\n  methods: {\n    resetForm() {\n      this.$refs.form.resetFields();\n    },\n    handleSizeChange(val) {\n      console.log(`${val} items per page`);\n      this.pageNum = 1;\n      this.pageSize = val;\n      this.loadPost();\n    },\n    handleCurrentChange(val) {\n      console.log(`current page: ${val}`);\n      this.pageNum = val;\n      this.loadPost();\n    },\n    resetParam() {\n      this.name = '';\n      this.gender = '';\n    },\n    selectCurrentChange(val) {\n      this.$emit(\"doSelectUser\", val);\n    },\n    add() {\n      this.centerDialogVisible = true;\n      this.$nextTick(() => {\n        this.resetForm();\n      });\n    },\n    mod(row) {\n      this.centerDialogVisible = true;\n      this.$nextTick(() => {\n        this.form.id = row.id;\n        this.form.name = row.name;\n        this.form.no = row.no;\n        this.form.password = '';\n        this.form.gender = row.gender + '';\n        this.form.phone = row.phone;\n        this.form.age = row.age + '';\n        this.form.roleId = row.roleId;\n      });\n    },\n    del(id) {\n      this.$axios.get(this.$httpUrl + '/user/del?id=' + id).then(res => res.data).then(res => {\n        console.log(res);\n        if (res.code == 200) {\n          this.$message({\n            message: 'Delete Successed!',\n            type: 'success'\n          });\n          this.loadPost();\n        } else {\n          this.$message({\n            message: 'Operation Failed！',\n            type: 'error'\n          });\n        }\n      });\n    },\n    doSave() {\n      this.$axios.post(this.$httpUrl + '/user/save', this.form).then(res => res.data).then(res => {\n        console.log(res);\n        if (res.code == 200) {\n          this.$message({\n            message: 'Save Successed!',\n            type: 'success'\n          });\n          this.centerDialogVisible = false;\n          this.loadPost();\n          this.resetForm();\n        } else {\n          this.$message({\n            message: 'Operation Failed！',\n            type: 'error'\n          });\n        }\n      });\n    },\n    doMod() {\n      this.$axios.post(this.$httpUrl + '/user/update', this.form).then(res => res.data).then(res => {\n        console.log(res);\n        if (res.code == 200) {\n          this.$message({\n            message: 'Save Successed!',\n            type: 'success'\n          });\n          this.centerDialogVisible = false;\n          this.loadPost();\n          this.resetForm();\n        } else {\n          this.$message({\n            message: 'Operation Failed！',\n            type: 'error'\n          });\n        }\n      });\n    },\n    save() {\n      this.$refs.form.validate(valid => {\n        if (valid) {\n          if (this.form.id) {\n            this.doMod();\n          } else {\n            this.doSave();\n          }\n        } else {\n          console.log('error submit!!');\n          return false;\n        }\n      });\n    },\n    loadGet() {\n      this.$axios.get(this.$httpUrl + '/user/list').then(res => res.data).then(res => {\n        console.log(res);\n      });\n    },\n    loadPost() {\n      this.$axios.post(this.$httpUrl + '/user/listPageEn', {\n        pageSize: this.pageSize,\n        pageNum: this.pageNum,\n        param: {\n          name: this.name,\n          //refer data里的name\n          gender: this.gender,\n          roleId: '2'\n        }\n      }).then(res => res.data).then(res => {\n        console.log(res);\n        if (res.code == 200) {\n          this.tableData = res.data;\n          this.total = res.total;\n        } else {\n          alert(\"Resource Get Failed\");\n        }\n      });\n    }\n  },\n  beforeMount() {\n    this.loadPost();\n  }\n};","map":{"version":3,"mappings":"AAgHA;EACAA;EACAC;IAEA;MACA;QACAC;MAAA;QACAA;MACA;IACA;IAGA;MACA;QACA;MACA;MACA;QACA;UACAA;QACA;UACAA;QACA;MACA;IACA;IAEA;MACAC;MACAC;MACAC;MACAC;MACAN;MAAA;MACAO;MACAC;QACAC;QACAC;MACA;QACAD;QACAC;MACA;MACAC;MACAC;QACAZ;QACAa;QACAC;QACAC;QACAC;QACAT;QACAU;MACA;MACAC;QACAlB,OACA;UAAAmB;UAAAC;UAAAC;QAAA,EACA;QACAR,KACA;UAAAM;UAAAC;UAAAC;QAAA,GACA;UAAAC;UAAAC;UAAAH;UAAAC;QAAA,GACA;UAAAG;UAAAH;QAAA,EACA;QACAP,WACA;UAAAK;UAAAC;UAAAC;QAAA,GACA;UAAAC;UAAAC;UAAAH;UAAAC;QAAA,EACA;QACAN,MACA;UAAAI;UAAAC;UAAAC;QAAA,GACA;UAAAC;UAAAC;UAAAH;UAAAC;QAAA,GACA;UAAAI;UAAAL;UAAAC;QAAA,GACA;UAAAG;UAAAH;QAAA,EACA;QACAL,QACA;UAAAG;UAAAC;UAAAC;QAAA,GACA;UAAAI;UAAAL;UAAAC;QAAA;MAEA;IACA;EACA;EACAK;IACAC;MACA;IACA;IACAC;MACAC;MACA;MACA;MACA;IACA;IACAC;MACAD;MACA;MACA;IACA;IACAE;MACA;MACA;IACA;IACAC;MACA;IACA;IACAC;MACA;MACA;QACA;MACA;IACA;IACAC;MACA;MACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;MACA;IACA;IACAC;MACA;QACAN;QACA;UAEA;YACAT;YACAgB;UACA;UACA;QACA;UACA;YACAhB;YACAgB;UACA;QACA;MAEA;IACA;IACAC;MACA;QACAR;QACA;UAEA;YACAT;YACAgB;UACA;UACA;UACA;UACA;QACA;UACA;YACAhB;YACAgB;UACA;QACA;MAEA;IACA;IACAE;MACA;QACAT;QACA;UAEA;YACAT;YACAgB;UACA;UACA;UACA;UACA;QACA;UACA;YACAhB;YACAgB;UACA;QACA;MAEA;IACA;IACAG;MACA;QACA;UACA;YACA;UACA;YACA;UACA;QACA;UACAV;UACA;QACA;MACA;IAEA;IACAW;MACA;QACAX;MACA;IACA;IACAY;MACA;QACArC;QACAC;QACAqC;UACA1C;UAAA;UACAO;UACAU;QACA;MACA;QACAY;QACA;UACA;UACA;QACA;UACAc;QACA;MAEA;IACA;EACA;EAEAC;IACA;EACA;AAEA","names":["name","data","callback","tableData","pageSize","pageNum","total","gender","genders","value","label","centerDialogVisible","form","no","password","age","phone","roleId","rules","required","message","trigger","min","max","validator","pattern","methods","resetForm","handleSizeChange","console","handleCurrentChange","resetParam","selectCurrentChange","add","mod","del","type","doSave","doMod","save","loadGet","loadPost","param","alert","beforeMount"],"sourceRoot":"src/components/user","sources":["SelectUser.vue"],"sourcesContent":["<template>\n  <div>\n    <div style=\"margin-bottom: 10px;text-align: center\">\n      <el-input v-model=\"name\" placeholder=\"Please enter name\" suffix-icon=\"el-icon-search\" style=\"width:200px\"\n                @keyup.enter.native=\"loadPost\"></el-input>\n      <el-select v-model=\"gender\" placeholder=\"Select Gender\" style=\"margin-left: 5px\">\n        <el-option\n            v-for=\"item in genders\"\n            :key=\"item.value\"\n            :label=\"item.label\"\n            :value=\"item.value\"\n            :disabled=\"item.disabled\">\n        </el-option>\n      </el-select>\n      <el-button type=\"primary\" style=\"margin-left: 10px\" @click=\"loadPost\">Search</el-button>\n      <el-button type=\"success\" @click=\"resetParam\">Reset</el-button>\n      \n    </div>\n    <el-table :data=\"tableData\"\n              :header-cell-style=\"{ background:'#f2f5f2', color:'#555555'}\"\n              border\n              highlight-current-row\n              @current-change=\"selectCurrentChange\"\n    >\n      <el-table-column prop=\"id\" label=\"ID\" width=\"100\">\n      </el-table-column>\n      <el-table-column prop=\"no\" label=\"Account Number\" width=\"240\">\n      </el-table-column>\n      <el-table-column prop=\"name\" label=\"Name\" width=\"120\">\n      </el-table-column>\n      <el-table-column prop=\"age\" label=\"Age\" width=\"80\">\n      </el-table-column>\n      <el-table-column prop=\"gender\" label=\"Gender\" width=\"100\">\n        <template slot-scope=\"scope\">\n          <el-tag\n              :type=\"scope.row.gender===1?'primary':'success'\"\n              disable-transitions>{{scope.row.gender===1  ?'Male':'Female'}}\n          </el-tag>\n        </template>\n      </el-table-column>\n      <el-table-column prop=\"roleId\" label=\"Role\" width=\"120\">\n        <template slot-scope=\"scope\">\n          <el-tag\n              :type=\"scope.row.roleId===0?'danger':(scope.row.roleId===1?'primary':'success')\"\n              disable-transitions>{{scope.row.roleId===0?'super':\n              (scope.row.roleId===1?'manager':'general')}}\n          </el-tag>\n        </template>\n      </el-table-column>\n      <el-table-column prop=\"phone\" label=\"Phone Number\" width=\"240\">\n      </el-table-column>\n    </el-table>\n    <el-pagination\n        @size-change=\"handleSizeChange\"\n        @current-change=\"handleCurrentChange\"\n        :current-page=\"pageNum\"\n        :page-sizes=\"[5, 10, 20,30]\"\n        :page-size=\"pageSize\"\n        layout=\"total, sizes, prev, pager, next, jumper\"\n        :total=\"total\">\n    </el-pagination>\n\n    <el-dialog\n        title=\"Adding account\"\n        :visible.sync=\"centerDialogVisible\"\n        width=\"30%\"\n        center>\n      <el-form ref=\"form\" :rules=\"rules\" :model=\"form\" label-width=\"120px\">\n        <!--      <el-form ref=\"form\" :rules=\"rules\" :model=\"form\" label-width=\"120px\">-->\n        <el-form-item label=\"name\" prop=\"name\">\n          <el-input v-model=\"form.name\"></el-input>\n        </el-form-item>\n        <!--      </el-form>-->\n        <!--      <el-form ref=\"form\" :rules=\"rules\" :model=\"form\" label-width=\"120px\">-->\n        <el-form-item label=\"Acc. number\" prop=\"no\">\n          <el-input v-model=\"form.no\"></el-input>\n        </el-form-item>\n        <!--      </el-form>-->\n        <!--      <el-form ref=\"form\" :rules=\"rules\" :model=\"form\" label-width=\"120px\">-->\n        <el-form-item label=\"password\" prop=\"password\">\n          <el-input v-model=\"form.password\"></el-input>\n        </el-form-item>\n        <!--      </el-form>-->\n        <!--      <el-form ref=\"form\" :rules=\"rules\" :model=\"form\" label-width=\"120px\">-->\n        <el-form-item label=\"age\" prop=\"age\">\n          <el-input v-model=\"form.age\"></el-input>\n        </el-form-item>\n        <!--      </el-form>-->\n        <!--      <el-form ref=\"form\" :model=\"form\" label-width=\"120px\">-->\n        <el-form-item label=\"gender\">\n          <el-radio-group v-model=\"form.gender\">\n            <el-radio label=\"1\">Male</el-radio>\n            <el-radio label=\"0\">Female</el-radio>\n          </el-radio-group>\n        </el-form-item>\n        <!--      </el-form>-->\n        <!--      <el-form ref=\"form\" :rules=\"rules\" :model=\"form\" label-width=\"120px\">-->\n        <el-form-item label=\"phone number\" prop=\"phone\">\n          <el-input v-model=\"form.phone\"></el-input>\n        </el-form-item>\n      </el-form>\n      <span slot=\"footer\" class=\"dialog-footer\">\n    <el-button @click=\"centerDialogVisible = false\">Cancel</el-button>\n    <el-button type=\"primary\" @click=\"save\">Confirm</el-button>\n  </span>\n    </el-dialog>\n\n  </div>\n</template>\n\n\n<script>\nexport default {\n  name: \"SelectUser\",\n  data() {\n\n    let checkAge = (rule, value, callback) => {\n      if(value>150){\n        callback(new Error('Input is too large')); }else{\n        callback();\n      }\n    };\n\n\n    let checkDuplicate =(rule,value,callback)=> {\n      if (this.form.id) {\n        return callback();\n      }\n      this.$axios.get(this.$httpUrl+\"/user/findByNo?no=\"+this.form.no).then(res=>res.data).then(res=>{\n        if (res.code!= 200) {\n          callback()\n        } else {\n          callback(new Error('Account already exist!'));\n        }\n      })\n    };\n\n    return{\n      tableData: [],\n      pageSize:10,\n      pageNum:1,\n      total:0,\n      name:'',//refer v-model里的name\n      gender:'',\n      genders:  [{\n        value: '1',\n        label: 'Male'\n      }, {\n        value: '2',\n        label: 'Female'\n      }],\n      centerDialogVisible:false,\n      form:{\n        name:'',\n        no:'',\n        password:'',\n        age:'',\n        phone:'',\n        gender:'0',\n        roleId:'2'\n      },\n      rules: {\n        name: [\n          {required: true, message: 'Please input  name', trigger: 'blur'},\n        ],\n        no: [\n          {required: true, message: 'Please input  account number', trigger: 'blur'},\n          {min: 3, max: 8, message: 'Length should be 3 to 8', trigger: 'blur'},\n          {validator:checkDuplicate,trigger: 'blur'}\n        ],\n        password: [\n          {required: true, message: 'Please input  password', trigger: 'blur'},\n          {min: 3, max: 8, message: 'Length should be 3 to 8', trigger: 'blur'}\n        ],\n        age: [\n          {required: true, message: 'Please input  age', trigger: 'blur'},\n          {min: 1, max: 3, message: 'Length should be 1 to 3', trigger: 'blur'},\n          {pattern: /^([1-9][0-9]*){1,3}$/,message: 'Age must be positive integer',trigger: \"blur\"},\n          {validator:checkAge,trigger: 'blur'}\n        ],\n        phone: [\n          {required: true,message: \"Phone number cannot be null\",trigger: \"blur\"},\n          {pattern: /^1[3|4|5|6|7|8|9][0-9]\\d{8}$/, message: \"Please input valid phone number\", trigger: \"blur\"}\n        ]\n      }\n    }\n  },\n  methods: {\n    resetForm() {\n      this.$refs.form.resetFields();\n    },\n    handleSizeChange(val) {\n      console.log(`${val} items per page`);\n      this.pageNum=1\n      this.pageSize=val\n      this.loadPost()\n    },\n    handleCurrentChange(val) {\n      console.log(`current page: ${val}`);\n      this.pageNum=val\n      this.loadPost()\n    },\n    resetParam(){\n      this.name=''\n      this.gender=''\n    },\n    selectCurrentChange(val) {\n      this.$emit(\"doSelectUser\",val)\n    },\n    add(){\n      this.centerDialogVisible=true;\n      this.$nextTick(()=>{\n        this.resetForm()\n      })\n    },\n    mod(row){\n      this.centerDialogVisible=true\n      this.$nextTick(()=>{\n        this.form.id=row.id\n        this.form.name=row.name\n        this.form.no=row.no\n        this.form.password=''\n        this.form.gender = row.gender +''\n        this.form.phone=row.phone\n        this.form.age=row.age+''\n        this.form.roleId=row.roleId\n      })\n    },\n    del(id){\n      this.$axios.get(this.$httpUrl+'/user/del?id='+id).then(res=>res.data).then(res=>{\n        console.log(res)\n        if(res.code==200){\n\n          this.$message({\n            message: 'Delete Successed!',\n            type: 'success'\n          });\n          this.loadPost()\n        }else{\n          this.$message({\n            message: 'Operation Failed！',\n            type: 'error'\n          });\n        }\n\n      })\n    },\n    doSave(){\n      this.$axios.post(this.$httpUrl+'/user/save',this.form).then(res=>res.data).then(res=>{\n        console.log(res)\n        if(res.code==200){\n\n          this.$message({\n            message: 'Save Successed!',\n            type: 'success'\n          });\n          this.centerDialogVisible = false\n          this.loadPost()\n          this. resetForm()\n        }else{\n          this.$message({\n            message: 'Operation Failed！',\n            type: 'error'\n          });\n        }\n\n      })\n    },\n    doMod(){\n      this.$axios.post(this.$httpUrl+'/user/update',this.form).then(res=>res.data).then(res=>{\n        console.log(res)\n        if(res.code==200){\n\n          this.$message({\n            message: 'Save Successed!',\n            type: 'success'\n          });\n          this.centerDialogVisible = false\n          this.loadPost()\n          this. resetForm()\n        }else{\n          this.$message({\n            message: 'Operation Failed！',\n            type: 'error'\n          });\n        }\n\n      })\n    },\n    save(){\n      this.$refs.form.validate((valid) => {\n        if (valid) {\n          if(this.form.id){\n            this.doMod();\n          }else{\n            this.doSave();\n          }\n        } else {\n          console.log('error submit!!');\n          return false;\n        }\n      });\n\n    },\n    loadGet() {\n      this.$axios.get(this.$httpUrl+'/user/list').then(res => res.data).then(res =>{\n        console.log(res)\n      })\n    },\n    loadPost() {\n      this.$axios.post(this.$httpUrl+'/user/listPageEn',{\n        pageSize: this.pageSize,\n        pageNum:this.pageNum,\n        param:{\n          name:this.name,//refer data里的name\n          gender: this.gender,\n          roleId: '2'\n        }\n      }).then(res=>res.data).then(res=>{\n        console.log(res)\n        if(res.code==200){\n          this.tableData=res.data\n          this.total=res.total\n        }else{\n          alert(\"Resource Get Failed\")\n        }\n\n      })\n    },\n  },\n\n  beforeMount() {\n    this.loadPost()\n  }\n\n}\n</script>\n\n<style scoped>\n\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}